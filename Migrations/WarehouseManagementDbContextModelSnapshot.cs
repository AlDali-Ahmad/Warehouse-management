// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Warehouse_Management_2.Models;

#nullable disable

namespace Warehouse_Management_2.Migrations
{
    [DbContext(typeof(WarehouseManagementDbContext))]
    partial class WarehouseManagementDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Warehouse_Management_2.Models.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Warehouse_Management_2.Models.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Warehouse_Management_2.Models.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Warehouse_Management_2.Models.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Warehouse_Management_2.Models.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Warehouse_Management_2.Models.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Warehouse_Management_2.Models.BuyOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AfterDiscount")
                        .HasColumnType("int");

                    b.Property<int?>("BeforDiscountTotal")
                        .HasColumnType("int");

                    b.Property<int?>("Customerid")
                        .HasColumnType("int");

                    b.Property<int?>("DiscountPercent")
                        .HasColumnType("int");

                    b.Property<int?>("DiscountValue")
                        .HasColumnType("int");

                    b.Property<int?>("Employeeid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Customerid" }, "IX_BuyOrders_Customerid");

                    b.HasIndex(new[] { "Employeeid" }, "IX_BuyOrders_Employeeid");

                    b.ToTable("BuyOrders");
                });

            modelBuilder.Entity("Warehouse_Management_2.Models.BuyOrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ItemTotal")
                        .HasColumnType("int");

                    b.Property<int?>("Orderid")
                        .HasColumnType("int");

                    b.Property<int?>("Productid")
                        .HasColumnType("int");

                    b.Property<string>("Quentity")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Orderid");

                    b.HasIndex("Productid");

                    b.ToTable("BuyOrderDetails");
                });

            modelBuilder.Entity("Warehouse_Management_2.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CityName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Warehouse_Management_2.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Cityid")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NumperPhone")
                        .HasColumnType("text")
                        .HasColumnName("numper_phone");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Cityid" }, "IX_Customers_Cityid");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Warehouse_Management_2.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BaseSalary")
                        .HasColumnType("int");

                    b.Property<int?>("Cityid")
                        .HasColumnType("int");

                    b.Property<string>("Father")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NumberPhone")
                        .HasColumnType("text")
                        .HasColumnName("number_phone");

                    b.HasKey("Id");

                    b.HasIndex("Cityid");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Warehouse_Management_2.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BuyPrice")
                        .HasColumnType("int");

                    b.Property<int?>("CountInStock")
                        .HasColumnType("int")
                        .HasColumnName("Count_in_Stock");

                    b.Property<int?>("Discount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Expir")
                        .HasColumnType("date");

                    b.Property<string>("ProductName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("SellPrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Warehouse_Management_2.Models.SellOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("AfterDiscount")
                        .HasColumnType("float");

                    b.Property<double?>("BeforDiscountTotal")
                        .HasColumnType("float");

                    b.Property<string>("DiscountPercentage")
                        .HasColumnType("text");

                    b.Property<int?>("DiscountValue")
                        .HasColumnType("int");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("date");

                    b.Property<int?>("Supplierid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Supplierid" }, "IX_SellOrders_Supplierid");

                    b.ToTable("SellOrders");
                });

            modelBuilder.Entity("Warehouse_Management_2.Models.SellOrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ItemTotal")
                        .HasColumnType("int");

                    b.Property<int?>("Orderid")
                        .HasColumnType("int");

                    b.Property<int?>("Productid")
                        .HasColumnType("int");

                    b.Property<int?>("Quentity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Orderid" }, "IX_SellOrderDetails_Orderid");

                    b.HasIndex(new[] { "Productid" }, "IX_SellOrderDetails_Productid");

                    b.ToTable("SellOrderDetails");
                });

            modelBuilder.Entity("Warehouse_Management_2.Models.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Cityid")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NumberPhone")
                        .HasColumnType("text")
                        .HasColumnName("number_phone");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Cityid" }, "IX_Suppliers_Cityid");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.HasOne("Warehouse_Management_2.Models.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Warehouse_Management_2.Models.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Warehouse_Management_2.Models.AspNetRoleClaim", b =>
                {
                    b.HasOne("Warehouse_Management_2.Models.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Warehouse_Management_2.Models.AspNetUserClaim", b =>
                {
                    b.HasOne("Warehouse_Management_2.Models.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Warehouse_Management_2.Models.AspNetUserLogin", b =>
                {
                    b.HasOne("Warehouse_Management_2.Models.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Warehouse_Management_2.Models.AspNetUserToken", b =>
                {
                    b.HasOne("Warehouse_Management_2.Models.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Warehouse_Management_2.Models.BuyOrder", b =>
                {
                    b.HasOne("Warehouse_Management_2.Models.Customer", "Customer")
                        .WithMany("BuyOrders")
                        .HasForeignKey("Customerid")
                        .HasConstraintName("FK_BuyOrders_Customers");

                    b.HasOne("Warehouse_Management_2.Models.Employee", "Employee")
                        .WithMany("BuyOrders")
                        .HasForeignKey("Employeeid")
                        .HasConstraintName("FK_BuyOrders_Employees");

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Warehouse_Management_2.Models.BuyOrderDetail", b =>
                {
                    b.HasOne("Warehouse_Management_2.Models.BuyOrder", "Order")
                        .WithMany("BuyOrderDetails")
                        .HasForeignKey("Orderid")
                        .HasConstraintName("FK_BuyOrderDetails_BuyOrders");

                    b.HasOne("Warehouse_Management_2.Models.Product", "Product")
                        .WithMany("BuyOrderDetails")
                        .HasForeignKey("Productid")
                        .HasConstraintName("FK_BuyOrderDetails_Products");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Warehouse_Management_2.Models.Customer", b =>
                {
                    b.HasOne("Warehouse_Management_2.Models.City", "City")
                        .WithMany("Customers")
                        .HasForeignKey("Cityid")
                        .HasConstraintName("FK_Customers_Cities");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Warehouse_Management_2.Models.Employee", b =>
                {
                    b.HasOne("Warehouse_Management_2.Models.City", "City")
                        .WithMany("Employees")
                        .HasForeignKey("Cityid")
                        .HasConstraintName("FK_Employees_Cities");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Warehouse_Management_2.Models.SellOrder", b =>
                {
                    b.HasOne("Warehouse_Management_2.Models.Supplier", "Supplier")
                        .WithMany("SellOrders")
                        .HasForeignKey("Supplierid")
                        .HasConstraintName("FK_SellOrders_Suppliers");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Warehouse_Management_2.Models.SellOrderDetail", b =>
                {
                    b.HasOne("Warehouse_Management_2.Models.SellOrder", "Order")
                        .WithMany("SellOrderDetails")
                        .HasForeignKey("Orderid")
                        .HasConstraintName("FK_SellOrderDetails_SellOrders");

                    b.HasOne("Warehouse_Management_2.Models.Product", "Product")
                        .WithMany("SellOrderDetails")
                        .HasForeignKey("Productid")
                        .HasConstraintName("FK_SellOrderDetails_Products");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Warehouse_Management_2.Models.Supplier", b =>
                {
                    b.HasOne("Warehouse_Management_2.Models.City", "City")
                        .WithMany("Suppliers")
                        .HasForeignKey("Cityid")
                        .HasConstraintName("FK_Suppliers_Cities");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Warehouse_Management_2.Models.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");
                });

            modelBuilder.Entity("Warehouse_Management_2.Models.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserTokens");
                });

            modelBuilder.Entity("Warehouse_Management_2.Models.BuyOrder", b =>
                {
                    b.Navigation("BuyOrderDetails");
                });

            modelBuilder.Entity("Warehouse_Management_2.Models.City", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Employees");

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("Warehouse_Management_2.Models.Customer", b =>
                {
                    b.Navigation("BuyOrders");
                });

            modelBuilder.Entity("Warehouse_Management_2.Models.Employee", b =>
                {
                    b.Navigation("BuyOrders");
                });

            modelBuilder.Entity("Warehouse_Management_2.Models.Product", b =>
                {
                    b.Navigation("BuyOrderDetails");

                    b.Navigation("SellOrderDetails");
                });

            modelBuilder.Entity("Warehouse_Management_2.Models.SellOrder", b =>
                {
                    b.Navigation("SellOrderDetails");
                });

            modelBuilder.Entity("Warehouse_Management_2.Models.Supplier", b =>
                {
                    b.Navigation("SellOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
